diff --git a/Sources/GRPC/GRPCServerPipelineConfigurator.swift b/Sources/GRPC/GRPCServerPipelineConfigurator.swift
index 4a0c143..1a02cd7 100644
--- a/Sources/GRPC/GRPCServerPipelineConfigurator.swift
+++ b/Sources/GRPC/GRPCServerPipelineConfigurator.swift
@@ -25,9 +25,9 @@ import NIOTLS
 /// If TLS is enabled then the handler listens for an 'TLSUserEvent.handshakeCompleted' event and
 /// configures the pipeline appropriately for the protocol negotiated via ALPN. If TLS is not
 /// configured then the HTTP version is determined by parsing the inbound byte stream.
-final class GRPCServerPipelineConfigurator: ChannelInboundHandler, RemovableChannelHandler {
-  internal typealias InboundIn = ByteBuffer
-  internal typealias InboundOut = ByteBuffer
+public final class GRPCServerPipelineConfigurator: ChannelInboundHandler, RemovableChannelHandler {
+  public typealias InboundIn = ByteBuffer
+  public typealias InboundOut = ByteBuffer
 
   /// The server configuration.
   private let configuration: Server.Configuration
@@ -57,7 +57,7 @@ final class GRPCServerPipelineConfigurator: ChannelInboundHandler, RemovableChan
     case configuring
   }
 
-  init(configuration: Server.Configuration) {
+  public init(configuration: Server.Configuration) {
     if let tls = configuration.tls {
       self.state = .notConfigured(alpn: .expected(required: tls.requireALPN))
     } else {
@@ -251,7 +251,7 @@ final class GRPCServerPipelineConfigurator: ChannelInboundHandler, RemovableChan
 
   // MARK: - Channel Handler
 
-  internal func errorCaught(context: ChannelHandlerContext, error: Error) {
+  public func errorCaught(context: ChannelHandlerContext, error: Error) {
     if let delegate = self.configuration.errorDelegate {
       let baseError: Error
 
@@ -267,7 +267,7 @@ final class GRPCServerPipelineConfigurator: ChannelInboundHandler, RemovableChan
     context.close(mode: .all, promise: nil)
   }
 
-  internal func userInboundEventTriggered(context: ChannelHandlerContext, event: Any) {
+  public func userInboundEventTriggered(context: ChannelHandlerContext, event: Any) {
     switch self.state {
     case let .notConfigured(alpn: .expected(required)):
       if let event = event as? TLSUserEvent {
@@ -283,7 +283,7 @@ final class GRPCServerPipelineConfigurator: ChannelInboundHandler, RemovableChan
     context.fireUserInboundEventTriggered(event)
   }
 
-  internal func channelRead(context: ChannelHandlerContext, data: NIOAny) {
+  public func channelRead(context: ChannelHandlerContext, data: NIOAny) {
     self.bufferedReads.append(data)
 
     switch self.state {
@@ -302,7 +302,7 @@ final class GRPCServerPipelineConfigurator: ChannelInboundHandler, RemovableChan
     // Don't forward the reads: we'll do so when we have configured the pipeline.
   }
 
-  internal func removeHandler(
+  public func removeHandler(
     context: ChannelHandlerContext,
     removalToken: ChannelHandlerContext.RemovalToken
   ) {
